# ============================================
# ShiftMaster 仮想ホスト設定
# HTTPS対応・医療機関向けセキュリティ強化
# ============================================

# HTTP -> HTTPS リダイレクト
server {
    listen 80;
    server_name localhost shiftmaster.local;
    
    # Let's Encrypt用
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # その他のリクエストはHTTPSにリダイレクト
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS メインサイト
server {
    listen 443 ssl http2;
    server_name localhost shiftmaster.local;
    
    # SSL設定
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # HSTS（HTTP Strict Transport Security）
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # セキュリティヘッダー強化
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self';" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # ログイン画面のレート制限
    location /accounts/login/ {
        limit_req zone=login burst=5 nodelay;
        proxy_pass http://web:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # API エンドポイントのレート制限
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://web:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # 静的ファイル配信
    location /static/ {
        alias /var/www/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
        
        # ファイル種別別の設定
        location ~* \.(css|js)$ {
            add_header Cache-Control "public, max-age=31536000";
        }
        
        location ~* \.(jpg|jpeg|png|gif|ico|svg)$ {
            add_header Cache-Control "public, max-age=31536000";
        }
    }
    
    # メディアファイル配信（医療データ）
    location /media/ {
        alias /var/www/media/;
        expires 1h;
        
        # 医療データへのアクセス制限
        # 認証が必要なファイルは Django で処理
        location ~* \.(pdf|doc|docx|xls|xlsx)$ {
            proxy_pass http://web:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # ヘルスチェックエンドポイント
    location /health/ {
        access_log off;
        proxy_pass http://web:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # メインアプリケーション
    location / {
        proxy_pass http://web:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket対応（必要に応じて）
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # タイムアウト設定
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # セキュリティ：機密ファイルへのアクセス拒否
    location ~ /\. {
        deny all;
        access_log off;
    }
    
    location ~ ^/(\.env|requirements\.txt|Dockerfile|docker-compose\.yml)$ {
        deny all;
        access_log off;
    }
}
