# 🚀 ShiftMaster GitHub Actions CI/CD パイプライン

name: ShiftMaster Production CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: minatoman/shiftmaster
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # ============================================
  # コード品質チェック・テスト
  # ============================================
  quality-checks:
    name: 🔍 コード品質チェック
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort bandit safety mypy

      - name: Code formatting check (Black)
        run: black --check --diff .

      - name: Import sorting check (isort)
        run: isort --check-only --diff .

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type checking (mypy)
        run: mypy . --ignore-missing-imports

      - name: Security scan (Bandit)
        run: bandit -r . -x tests/

      - name: Dependency vulnerability scan
        run: safety check

  test:
    name: 🧪 テスト実行
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_shiftmaster
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 コードチェックアウト
        uses: actions/checkout@v4

      - name: 🐍 Python ${{ matrix.python-version }} セットアップ
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 依存関係インストール
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov

      - name: 🔍 コード品質チェック
        run: |
          # Flake8 - コードスタイルチェック
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🛡️ セキュリティスキャン
        run: |
          pip install bandit safety
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: 🧪 Djangoテスト実行
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_shiftmaster
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SECRET_KEY: test-secret-key-for-ci
          DJANGO_DEBUG: False
        run: |
          python manage.py test --settings=shiftmaster.settings.test --verbosity=2

      - name: 📊 カバレッジレポート生成
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_shiftmaster
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SECRET_KEY: test-secret-key-for-ci
          DJANGO_DEBUG: False
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html

      - name: 📤 カバレッジ結果アップロード
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # ============================================
  # Dockerイメージビルド・テスト
  # ============================================
  docker-build:
    name: 🐳 Dockerビルド
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 コードチェックアウト
        uses: actions/checkout@v4

      - name: 🔧 Docker Buildx セットアップ
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ 開発環境イメージビルド
        run: |
          docker build --target development -t shiftmaster:dev .

      - name: 🏗️ 本番環境イメージビルド
        run: |
          docker build --target production -t shiftmaster:prod .

      - name: 🧪 Dockerコンテナテスト
        run: |
          # 開発環境テスト
          docker run --rm shiftmaster:dev python manage.py check

          # 本番環境テスト
          docker run --rm -e DJANGO_SECRET_KEY=test-key shiftmaster:prod python manage.py check --deploy

      - name: 🔍 Dockerイメージ脆弱性スキャン
        run: |
          # Trivy インストール
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

          # 脆弱性スキャン実行
          trivy image --exit-code 0 --severity HIGH,CRITICAL shiftmaster:prod

  # ============================================
  # 本番デプロイ（mainブランチのみ）
  # ============================================
  deploy:
    name: 🚀 本番デプロイ
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://your-domain.com

    steps:
      - name: 📥 コードチェックアウト
        uses: actions/checkout@v4

      - name: 🔐 GitHub Container Registry ログイン
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ 本番イメージビルド・プッシュ
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🚀 本番環境デプロイ
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/shiftmaster
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ github.actor }} --password-stdin
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d
            docker system prune -f

      - name: 🩺 デプロイ後ヘルスチェック
        run: |
          sleep 30
          curl -f https://your-domain.com/health/ || exit 1

  # ============================================
  # セキュリティスキャン・監査
  # ============================================
  security:
    name: 🛡️ セキュリティ監査
    runs-on: ubuntu-latest

    steps:
      - name: 📥 コードチェックアウト
        uses: actions/checkout@v4

      - name: 🔍 CodeQL セキュリティ分析
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: 🏗️ CodeQL 自動ビルド
        uses: github/codeql-action/autobuild@v2

      - name: 📊 CodeQL 分析実行
        uses: github/codeql-action/analyze@v2

      - name: 🐍 Python依存関係セキュリティチェック
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
          safety check --json --output safety-report.json || true
          pip-audit --format=json --output=pip-audit-report.json || true

      - name: 📤 セキュリティレポートアップロード
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            safety-report.json
            pip-audit-report.json
            bandit-report.json

  # ============================================
  # 通知・レポート
  # ============================================
  notify:
    name: 📢 通知送信
    runs-on: ubuntu-latest
    needs: [test, docker-build, deploy, security]
    if: always()

    steps:
      - name: 📧 Slack通知（成功時）
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "🎉 ShiftMaster デプロイ成功！ ${{ github.ref }} → Production"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Slack通知（失敗時）
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ ShiftMaster パイプライン失敗: ${{ github.ref }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 医療施設向け緊急通知
        if: failure() && github.ref == 'refs/heads/main'
        run: |
          curl -X POST "${{ secrets.EMERGENCY_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "alert_level": "HIGH",
              "system": "ShiftMaster",
              "message": "本番環境デプロイ失敗 - 即座に確認が必要です",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref }}"
            }'

  # ============================================
  # パフォーマンステスト
  # ============================================
  performance:
    name: ⚡ パフォーマンステスト
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 コードチェックアウト
        uses: actions/checkout@v4

      - name: 🚀 負荷テスト実行
        run: |
          # Locustを使用した負荷テスト（別途設定ファイル必要）
          pip install locust
          # locust -f tests/load/locustfile.py --headless -u 50 -r 10 -t 300s --host=https://your-domain.com

      - name: 📊 パフォーマンスレポート生成
        run: |
          echo "パフォーマンステスト結果をここに記録"
          # 実際の実装では適切なレポート生成ツールを使用

# ============================================
# ワークフロー完了
# ============================================
